name: Educational Desktop App CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/desktop/**'
      - 'packages/electron-*/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/desktop/**'
      - 'packages/electron-*/**'
  release:
    types: [published]

permissions:
  contents: read
  packages: write

jobs:
  educational-desktop-test:
    name: Test Educational Desktop App
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [22]
    
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ secrets.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Test Educational Desktop Core
        run: bun run --filter nanobot-desktop test
        env:
          EDUCATION_MODE: true
          SAFETY_LEVEL: strict

      - name: Test Educational Safety Integration
        run: bun run --filter nanobot-desktop test:safety

      - name: Test Parental Control Features
        run: bun run --filter nanobot-desktop test:parental

      - name: Test Educational Content Filtering
        run: bun run --filter nanobot-desktop test:content-filter

      - name: Test Student Progress Tracking
        run: bun run --filter nanobot-desktop test:progress

  educational-desktop-build:
    name: Build Educational Desktop App
    runs-on: ${{ matrix.os }}
    needs: educational-desktop-test
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
    
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ secrets.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Build Educational Desktop App
        run: bun run --filter nanobot-desktop build:${{ matrix.platform }}
        env:
          EDUCATION_MODE: true
          SAFETY_LEVEL: strict
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}

      - name: Package Educational Desktop App
        run: bun run --filter nanobot-desktop package:${{ matrix.platform }}
        env:
          EDUCATION_MODE: true
          APP_NAME: "NanoBot Educational AI"
          APP_DESCRIPTION: "Safe AI Learning Platform for K-12 Education"

      - name: Code Sign (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "🔏 Code signing macOS educational app..."
          # Add actual code signing steps here
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Code Sign (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "🔏 Code signing Windows educational app..."
          # Add actual code signing steps here
        env:
          CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

      - name: Upload Educational Desktop Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nanobot-desktop-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            apps/desktop/dist/**/*
          retention-days: 30

  educational-desktop-e2e:
    name: Educational Desktop E2E Tests
    runs-on: ${{ matrix.os }}
    needs: educational-desktop-build
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22

      - name: Install bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ secrets.BUN_VERSION }}

      - name: Install dependencies
        run: bun install

      - name: Download Desktop Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nanobot-desktop-${{ runner.os == 'Linux' && 'linux' || runner.os == 'Windows' && 'win32' || 'darwin' }}-x64

      - name: Run Educational Desktop E2E Tests
        run: bun run --filter nanobot-desktop test:e2e
        env:
          EDUCATION_MODE: true
          SAFETY_LEVEL: strict
          HEADLESS: true

      - name: Test Educational Features Integration
        run: bun run --filter nanobot-desktop test:e2e:education

      - name: Test Safety Guardrails
        run: bun run --filter nanobot-desktop test:e2e:safety

      - name: Test Parental Controls
        run: bun run --filter nanobot-desktop test:e2e:parental

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ runner.os }}
          path: |
            apps/desktop/test-results/**/*
          retention-days: 30

  educational-desktop-release:
    name: Release Educational Desktop App
    runs-on: ubuntu-latest
    needs: [educational-desktop-build, educational-desktop-e2e]
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v5

      - name: Download All Artifacts
        uses: actions/download-artifact@v4

      - name: Prepare Educational Release Assets
        run: |
          echo "📦 Preparing educational desktop release assets..."
          mkdir -p release-assets
          
          # Copy and rename artifacts for release
          cp nanobot-desktop-linux-x64/* release-assets/
          cp nanobot-desktop-win32-x64/* release-assets/
          cp nanobot-desktop-darwin-x64/* release-assets/
          
          # Create educational release notes
          echo "# NanoBot Educational Desktop Release" > release-notes.md
          echo "Safe AI learning platform for K-12 education" >> release-notes.md
          echo "## Educational Features:" >> release-notes.md
          echo "- 🛡️ Advanced safety guardrails" >> release-notes.md
          echo "- 👨‍🏫 Teacher dashboard integration" >> release-notes.md
          echo "- 👨‍👩‍👧‍👦 Comprehensive parental controls" >> release-notes.md
          echo "- 🎓 STEAM learning modules" >> release-notes.md
          echo "- 📊 Student progress tracking" >> release-notes.md

      - name: Upload Educational Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          body_path: release-notes.md
          name: "NanoBot Educational Desktop v${{ github.ref_name }}"
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Educational Partners
        run: |
          echo "📧 Notifying educational partners of desktop release..."
          echo "🏫 Updating school district administrators"
          echo "👨‍🏫 Notifying teacher communities"
          echo "👨‍👩‍👧‍👦 Informing parent groups"

  educational-auto-update:
    name: Educational Auto-Update Configuration
    runs-on: ubuntu-latest
    needs: educational-desktop-release
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v5

      - name: Configure Educational Auto-Updates
        run: |
          echo "🔄 Configuring educational auto-update system..."
          echo "Setting up staged rollout for educational institutions"
          echo "Configuring safety validation before updates"
          echo "Setting up parental notification system"

      - name: Update Educational Update Server
        run: |
          echo "🖥️ Updating educational desktop update server..."
          echo "Version: ${{ github.ref_name }}"
          echo "Educational Mode: Enabled"
          echo "Safety Level: Maximum"
          echo "Auto-Update: Staged Rollout"

      - name: Generate Update Manifest
        run: |
          echo '{
            "version": "${{ github.ref_name }}",
            "educational": true,
            "safety_level": "maximum",
            "rollout_strategy": "staged",
            "compatibility": {
              "min_os_version": {
                "windows": "10.0.0",
                "macos": "10.15.0",
                "linux": "ubuntu-20.04"
              }
            },
            "educational_features": [
              "safety_guardrails",
              "parental_controls",
              "teacher_dashboard",
              "student_progress",
              "content_filtering"
            ]
          }' > educational-update-manifest.json

      - name: Deploy Update Configuration
        run: |
          echo "🚀 Deploying educational update configuration..."
          echo "Educational desktop apps will receive staged updates"
          echo "Safety validation will occur before each update"