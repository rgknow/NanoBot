/**
 * Educational tRPC Router with Integrated Guardrails
 * 
 * Extends existing tRPC educational endpoints with comprehensive LLM safety
 */

import { z } from 'zod';
import { TRPCError } from '@trpc/server';
import { publicProcedure, router } from '@/server/trpc';
import {
    GuardrailMiddleware,
    createGuardrailContext,
    GuardedLLMResponse,
    LLMProvider
} from '@/lib/guardrails';

// Educational schemas
const askAITutorSchema = z.object({
    question: z.string().min(1).max(2000),
    courseId: z.string().optional(),
    subject: z.string().optional(),
    difficulty: z.enum(['beginner', 'intermediate', 'advanced']).optional()
});

const generateContentSchema = z.object({
    prompt: z.string().min(1).max(1000),
    contentType: z.enum(['lesson', 'quiz', 'explanation', 'example']),
    gradeLevel: z.string().optional(),
    subject: z.string().optional()
});

const chatSessionSchema = z.object({
    messages: z.array(z.object({
        role: z.enum(['user', 'assistant']),
        content: z.string()
    })),
    sessionId: z.string().optional(),
    subject: z.string().optional()
});

// Mock LLM Provider for demonstration
class MockLLMProvider implements LLMProvider {
    name = 'mock-educational-llm';

    async generateResponse(request: any): Promise<any> {
        // In production, this would call actual LLM services like OpenAI, Anthropic, etc.
        return {
            content: `This is a mock educational response. In production, this would be generated by an actual LLM based on the request: ${JSON.stringify(request.messages.slice(-1))}`,
            model: this.name,
            usage: {
                promptTokens: 100,
                completionTokens: 50,
                totalTokens: 150
            }
        };
    }
}

export const educationalGuardedRouter = router({
    /**
     * AI Tutor endpoint with comprehensive guardrails
     */
    askAITutor: publicProcedure
        .input(askAITutorSchema)
        .mutation(async ({ input, ctx }) => {
            try {
                // Get user context from session
                const user = ctx.user;
                if (!user) {
                    throw new TRPCError({
                        code: 'UNAUTHORIZED',
                        message: 'Must be logged in to use AI tutor'
                    });
                }

                // Create guardrail context
                const guardrailContext = createGuardrailContext({
                    id: user.id,
                    role: user.role || 'student',
                    grade: user.grade,
                    subject: input.subject,
                    academicLevel: input.difficulty
                });

                // Create LLM request
                const llmRequest = {
                    messages: [
                        {
                            role: 'user' as const,
                            content: input.question
                        }
                    ],
                    model: 'educational-tutor',
                    maxTokens: 500,
                    temperature: 0.7
                };

                // Process with guardrails
                const guardrails = new GuardrailMiddleware();
                const provider = new MockLLMProvider();

                const response = await guardrails.processLLMRequest(
                    provider,
                    llmRequest,
                    guardrailContext
                );

                // Check if response passed guardrails
                if (!response.guardrailsPassed) {
                    // Log violation for monitoring
                    console.warn('AI Tutor guardrail violation:', {
                        userId: user.id,
                        violations: response.violations,
                        wasFiltered: response.wasFiltered
                    });

                    // For high-severity violations, block response
                    const highSeverityViolations = response.violations.filter(v => v.severity === 'high');
                    if (highSeverityViolations.length > 0) {
                        throw new TRPCError({
                            code: 'BAD_REQUEST',
                            message: 'Your request cannot be processed. Please ask a teacher or parent for help with this topic.'
                        });
                    }
                }

                return {
                    response: response.content,
                    sessionId: guardrailContext.sessionId,
                    guardrailsPassed: response.guardrailsPassed,
                    wasFiltered: response.wasFiltered,
                    educationalMetadata: {
                        subject: input.subject,
                        difficulty: input.difficulty,
                        courseId: input.courseId
                    }
                };

            } catch (error) {
                console.error('AI Tutor error:', error);

                // Return safe fallback
                throw new TRPCError({
                    code: 'INTERNAL_SERVER_ERROR',
                    message: 'Unable to process your question right now. Please try again later or ask a teacher for help.'
                });
            }
        }),

    /**
     * Content generation with role-based guardrails
     */
    generateEducationalContent: publicProcedure
        .input(generateContentSchema)
        .mutation(async ({ input, ctx }) => {
            try {
                const user = ctx.user;
                if (!user) {
                    throw new TRPCError({
                        code: 'UNAUTHORIZED',
                        message: 'Must be logged in to generate content'
                    });
                }

                // Only teachers, tutors, and admins can generate content
                if (!['teacher', 'tutor', 'admin'].includes(user.role || '')) {
                    throw new TRPCError({
                        code: 'FORBIDDEN',
                        message: 'Only teachers, tutors, and administrators can generate educational content'
                    });
                }

                const guardrailContext = createGuardrailContext({
                    id: user.id,
                    role: user.role || 'teacher',
                    grade: input.gradeLevel,
                    subject: input.subject
                });

                const llmRequest = {
                    messages: [
                        {
                            role: 'system' as const,
                            content: `You are creating ${input.contentType} content for ${input.subject || 'general education'} at ${input.gradeLevel || 'appropriate'} grade level.`
                        },
                        {
                            role: 'user' as const,
                            content: input.prompt
                        }
                    ],
                    model: 'content-generator',
                    maxTokens: 1000,
                    temperature: 0.8
                };

                const guardrails = new GuardrailMiddleware();
                const provider = new MockLLMProvider();

                const response = await guardrails.processLLMRequest(
                    provider,
                    llmRequest,
                    guardrailContext
                );

                return {
                    content: response.content,
                    contentType: input.contentType,
                    subject: input.subject,
                    gradeLevel: input.gradeLevel,
                    guardrailsPassed: response.guardrailsPassed,
                    generatedAt: new Date().toISOString()
                };

            } catch (error) {
                console.error('Content generation error:', error);
                throw new TRPCError({
                    code: 'INTERNAL_SERVER_ERROR',
                    message: 'Unable to generate content right now. Please try again later.'
                });
            }
        }),

    /**
     * Chat session with continuous guardrail monitoring
     */
    chatSession: publicProcedure
        .input(chatSessionSchema)
        .mutation(async ({ input, ctx }) => {
            try {
                const user = ctx.user;
                if (!user) {
                    throw new TRPCError({
                        code: 'UNAUTHORIZED',
                        message: 'Must be logged in to chat'
                    });
                }

                const guardrailContext = createGuardrailContext({
                    id: user.id,
                    role: user.role || 'student',
                    grade: user.grade,
                    subject: input.subject
                });

                // Convert chat messages to LLM format
                const llmMessages = input.messages.map(msg => ({
                    role: msg.role === 'user' ? 'user' as const : 'assistant' as const,
                    content: msg.content
                }));

                const llmRequest = {
                    messages: llmMessages,
                    model: 'chat-tutor',
                    maxTokens: 300,
                    temperature: 0.6
                };

                const guardrails = new GuardrailMiddleware();
                const provider = new MockLLMProvider();

                const response = await guardrails.processLLMRequest(
                    provider,
                    llmRequest,
                    guardrailContext
                );

                // For students, extra safety checks on chat sessions
                if (user.role === 'student') {
                    const consecutiveViolations = await this.checkConsecutiveViolations(
                        user.id,
                        input.sessionId || 'default'
                    );

                    if (consecutiveViolations >= 3) {
                        // Temporarily suspend chat and notify appropriate adults
                        await this.notifyGuardians(user.id, 'multiple_safety_violations');

                        throw new TRPCError({
                            code: 'FORBIDDEN',
                            message: 'Chat session suspended. Please talk to your teacher or parent.'
                        });
                    }
                }

                return {
                    message: {
                        role: 'assistant' as const,
                        content: response.content
                    },
                    sessionId: input.sessionId || guardrailContext.sessionId,
                    guardrailsPassed: response.guardrailsPassed,
                    wasFiltered: response.wasFiltered,
                    continuationAllowed: true
                };

            } catch (error) {
                console.error('Chat session error:', error);
                throw new TRPCError({
                    code: 'INTERNAL_SERVER_ERROR',
                    message: 'Chat is unavailable right now. Please try again later.'
                });
            }
        }),

    /**
     * Get guardrail status for user (for monitoring and parental controls)
     */
    getGuardrailStatus: publicProcedure
        .query(async ({ ctx }) => {
            try {
                const user = ctx.user;
                if (!user) {
                    throw new TRPCError({
                        code: 'UNAUTHORIZED',
                        message: 'Must be logged in'
                    });
                }

                // Only parents, teachers, and admins can view guardrail status
                if (!['parent', 'teacher', 'admin'].includes(user.role || '')) {
                    throw new TRPCError({
                        code: 'FORBIDDEN',
                        message: 'Insufficient permissions to view guardrail status'
                    });
                }

                // In production, this would query actual guardrail logs from database
                const mockStatus = {
                    userId: user.id,
                    totalInteractions: 150,
                    violationsThisWeek: 2,
                    lastViolation: '2024-01-15T10:30:00Z',
                    safetyScore: 95, // Percentage of safe interactions
                    recentTopics: ['mathematics', 'science', 'reading'],
                    blockedAttempts: 1,
                    parentalNotifications: 0
                };

                return mockStatus;

            } catch (error) {
                console.error('Guardrail status error:', error);
                throw new TRPCError({
                    code: 'INTERNAL_SERVER_ERROR',
                    message: 'Unable to retrieve guardrail status'
                });
            }
        })
});

// Helper methods for the router
export class GuardrailHelpers {
    /**
     * Check for consecutive violations by user/session
     */
    static async checkConsecutiveViolations(
        userId: string,
        sessionId: string
    ): Promise<number> {
        // In production, this would query the database for recent violations
        // For now, return mock data
        return Math.floor(Math.random() * 3); // 0-2 violations
    }

    /**
     * Notify guardians of safety violations
     */
    static async notifyGuardians(
        userId: string,
        violationType: string
    ): Promise<void> {
        // In production, this would:
        // 1. Look up parent/guardian contacts
        // 2. Send appropriate notifications (email, SMS, app notification)
        // 3. Log the notification for tracking

        console.log(`GUARDIAN NOTIFICATION: User ${userId} - ${violationType}`);

        // Could integrate with email service, SMS service, push notifications, etc.
    }
}

export default educationalGuardedRouter;